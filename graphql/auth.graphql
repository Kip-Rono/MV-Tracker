input LoginInput {
    email: String!
    password: String!
}

type LoginResponse {
    token: String
    name: User
    response: String
}

input RegisterInput {
    name: String @rules(apply: ["required"])
    email: String @rules(apply: ["required"])
    password1: String @rules(apply: ["required"])
    password2: String @rules(apply: ["required"])
    updated_at: DateTime
}

type RegisterResponse {
    response: String!
    #message: String!
}

input MotorVehicleInput {
    name: String @rules(apply: ["required"])
    reg_no: String @rules(apply: ["required"])
    year_of_man: String @rules(apply: ["required"])
    vehicle_type: String
    tonnage: String
}

type SaveMotorVehicleResponse {
response: String!
#message: String!
}

type updateMotorVehicleResponse {
response: String!
#message: String!
}


input OneMotorVehicleInput {
reg_no: String @rules(apply: ["required"])
}

type fetchMotorVehicleResponse {
    name: String!
    reg_no: String!
    year_of_man: String
    vehicle_type: String
    tonnage: Tonnage
}

type LogoutResponse {
    status: String!
    message: String
}

type ForgotPasswordResponse {
    status: String!
    message: String
}

input ForgotPasswordInput {
    email: String!
}

input NewPasswordWithCodeInput {
    email: String!
    token: String!
    password: String!
    password_confirmation: String!
}

type CheckDomainResponse {
    valid: Boolean!
    message: String!
}


type AuthPayload {
    access_token: String
    refresh_token: String
    expires_in: Int
    token_type: String
    user: User
}



#extend type Mutation {
#    login(data: LoginInput): Boolean!
#    @field(resolver: "App\\GraphQL\\Resolvers\\LoginResolver@resolve")
#    logout: LogoutResponse! @protect(guards: ["api"]) @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
#    forgotPassword(data: ForgotPasswordInput!): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
#    updateForgottenPassword(data: NewPasswordWithCodeInput): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
#    register(data: RegisterInput!) : RegisterResponse! @field(resolver: "App\\GraphQL\\Resolvers\\RegisterResolver@resolve")
#    checkDomain(fqdn: String!) : CheckDomainResponse! @field(resolver: "App\\GraphQL\\Resolvers\\CheckDomainResolver@resolve")
#}




# Before Schema
##input LoginInput {
##    email: String!
##    password: String!
##}
#
#input RefreshTokenInput {
#    refresh_token: String
#}
#
##type User {
##    id: ID!
##    name: String!
##    email: String!
##}
#
#type AuthPayload {
#    access_token: String
#    refresh_token: String
#    expires_in: Int
#    token_type: String
#    user: User
#}
#
#type RefreshTokenPayload {
#    access_token: String!
#    refresh_token: String!
#    expires_in: Int!
#    token_type: String!
#}
#
#type LogoutResponse {
#    status: String!
#    message: String
#}
#
#type ForgotPasswordResponse {
#    status: String!
#    message: String
#}
#
#type RegisterResponse {
#    tokens: AuthPayload
#    status: RegisterStatuses!
#}
#
#type UpdatePasswordResponse {
#    status: String!
#    message: String
#}
#
#enum RegisterStatuses {
#    MUST_VERIFY_EMAIL
#    SUCCESS
#}
#
#input ForgotPasswordInput {
#    email: String! @rules(apply: ["required", "email"])
#}
#
#input NewPasswordWithCodeInput {
#    email: String! @rules(apply: ["required", "email"])
#    token: String! @rules(apply: ["required", "string"])
#    password: String! @rules(apply: ["required", "confirmed", "min:8"])
#    password_confirmation: String!
#}
#
#input RegisterInput {
#    name: String! @rules(apply: ["required", "string"])
#    email: String! @rules(apply: ["required", "email", "unique:users,email"])
#    password: String! @rules(apply: ["required", "confirmed", "min:8"])
#    password_confirmation: String!
#}
#
#input SocialLoginInput {
#    provider: String! @rules(apply: ["required"])
#    token: String! @rules(apply: ["required"])
#}
#
#input VerifyEmailInput {
#    token: String!
#}
#
#input UpdatePassword {
#    old_password: String!
#    password: String! @rules(apply: ["required", "confirmed", "min:8"])
#    password_confirmation: String!
#}
#
##extend type Mutation {
##    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
##    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
##    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
##    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
##    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
##    register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
##    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
##    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
##    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])
##}
